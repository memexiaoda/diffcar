#!/usr/bin/env python
# -*- coding: utf-8 -*-
import rospy
import MySQLdb
from geometry_msgs.msg import Pose,Quaternion,Point, PoseStamped, PoseWithCovarianceStamped, TwistWithCovariance, Twist, Vector3
from transform_utils import quat_to_angle, normalize_angle
from visualization_msgs.msg import Marker
from actionlib_msgs.msg import *  
from math import radians, pi 
import time
from tf.transformations import quaternion_from_euler
from math import  sqrt, pow, pi,sin,cos,asin

class marker():
    def __init__(self):
        rospy.init_node('mysqlpose', anonymous=True)
        waypoints = list()
        conn=MySQLdb.connect(host='10.110.30.187', user='root', passwd='123456', db='suirui_outdoor_1_0', port=3306, charset='utf8')
        cur = conn.cursor()
        cur.execute('select * from rb_topologypoint;' )
        self.result = cur.fetchall()

        print "len(self.result)", len(self.result)
        for row in self.result:
            quaternion = Quaternion()
            q_angle = quaternion_from_euler(0, 0, row[4], axes='sxyz')
            quaternion = Quaternion(*q_angle)
            waypoints.append(Pose(Point(row[2], row[3], 0),quaternion))
            print "waypoints:",waypoints

        #cur = conn.cursor()
        cur.execute("select a.id line,b.fname fname1,b.lasermapX point1x,b.lasermapY point1y,c.fname fname2,c.lasermapX point2x,c.lasermapY point2y from rb_topologyline a,rb_topologypoint b,rb_topologypoint c where a.point1 = b.id and a.point2 = c.id;")
        self.rows = cur.fetchall()

        for row in self.rows:
            line_id = row[0]
            fname1 = row[1]
            point1x = row[2]
            point1y = row[3]
            fname2 = row[4]
            point2x = row[5]
            point2y = row[6]
            distance = sqrt(pow((row[2]-row[5]),2) + pow((row[3]-row[6]),2))

            print "line_id",line_id
            print "fname1",fname1
            print "point1x",point1x
            print "point1y",point1y
            print "fname2",fname2
            print "point2x",point2x
            print "point2y",point2y
            print "distance",distance

            #SQL 更新语句
            #sql = "update rb_topologyline set distance = %.2f where id = %s"%(distance,id)
            try:
                # 执行SQL语句
                cur.execute("update rb_topologyline set distance = '%.2f' where id = '%s';"%(distance,line_id))
                # 提交到数据库执行
                conn.commit()
            except:
                # 发生错误时回滚
                conn.rollback()
        print "len(self.rows)",len(self.rows)
        #
        cur.close()
        conn.close()

        self.init_markers()
        for waypoint in waypoints:
            p = Point()
            p = waypoint.position
            print p
            self.markers.points.append(p)
            self.marker_pub.publish(self.markers)   
            time.sleep(0.1) 

    def init_markers(self):
        # Set up our waypoint markers
        # 设置标记的尺寸
        marker_scale = 0.4
        marker_lifetime = 0 # 0 is forever
        marker_ns = 'waypoints'
        marker_id = 0
        marker_color = {'r': 1.0, 'g': 0, 'b': 0, 'a': 1.0}
        
        # Define a marker publisher.
        # 定义一个标记的发布者
        self.marker_pub = rospy.Publisher('visualization_marker', Marker,queue_size=0)
        
        # Initialize the marker points list.
        # 初始化标记点的列表
        self.markers = Marker()
        self.markers.ns = marker_ns
        self.markers.id = marker_id
        self.markers.type = Marker.SPHERE_LIST
        self.markers.action = Marker.ADD
        self.markers.lifetime = rospy.Duration(marker_lifetime)
        self.markers.scale.x = marker_scale
        self.markers.scale.y = marker_scale
        self.markers.color.r = marker_color['r']
        self.markers.color.g = marker_color['g']
        self.markers.color.b = marker_color['b']
        self.markers.color.a = marker_color['a']
        
        self.markers.header.frame_id = 'map'
        self.markers.header.stamp = rospy.Time.now()
        self.markers.points = list()       
if __name__ == '__main__':
    marker()
    rospy.spin()
    #time.sleep(2000)
